package com.example.cryptoshop_backend.controllers;

import com.example.cryptoshop_backend.models.User;
import com.example.cryptoshop_backend.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import static com.example.cryptoshop_backend.utils.LoginValidators.isEmailValid;

public class UserController {
    @Controller
    //@CrossOrigin(origins = "http://localhost:3000")
    public static class MainController {
        @Autowired // This means to get the bean called userRepository
        // Which is auto-generated by Spring, we will use it to handle the data
        private UserRepository userRepository;

        @PostMapping(path="/signUp")
        public @ResponseBody String addNewUser (@RequestParam String name
                , @RequestParam String email, @RequestParam String username
                , @RequestParam String hashed_pass
                , @RequestParam (required = false) String btc_address
                , @RequestParam (required = false) String btc_xpub)
        {
            // @ResponseBody means the returned String is the response, not a view name
            // @RequestParam means it is a parameter from the GET or POST request

            if (!isEmailValid(email))
                return "Email not valid!\n";
            if (userRepository.findByEmail(email) != null || userRepository.findByUsername(username) != null)
                return "Username or email already taken!\n";

            User n = new User();
            n.setName(name);
            n.setEmail(email);
            n.setUsername(username);
            n.setHashed_pass(hashed_pass);
            n.setBtcAddress(btc_address);
            n.setBtcXpub(btc_xpub);
            userRepository.save(n);
            return "Saved\n";
        }

        @GetMapping(path="/allUsers")
        public @ResponseBody Iterable<User> getAllUsers() {
            // This returns a JSON or XML with the users
            return userRepository.findAll();
        }

        @PostMapping(path="/login")
            public ResponseEntity<String> userLogin(@RequestParam String emailOrUserName, @RequestParam String hashedPass)
        {
            User user;
            if (isEmailValid(emailOrUserName))
                user = userRepository.findByEmail(emailOrUserName);
            else
                user = userRepository.findByUsername(emailOrUserName);

            if ( user == null || !hashedPass.equals(user.getHashed_pass()))
                return ResponseEntity.badRequest().body("Incorrect password or user not found :(\n");
            else
                return ResponseEntity.ok("Login succesfull\n");
        }
    }
}
