package com.example.cryptoshop_backend.controllers;

import com.example.cryptoshop_backend.models.LoginDTO;
import com.example.cryptoshop_backend.models.Product;
import com.example.cryptoshop_backend.models.User;
import com.example.cryptoshop_backend.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

import static com.example.cryptoshop_backend.utils.LoginValidators.isEmailValid;

@Controller
public class UserController {
    //@CrossOrigin(origins = "http://localhost:3000")
    @Autowired
    // This means to get the bean called userRepository. Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/signUp")
    ResponseEntity<?> addNewUser(@RequestBody User newUser) {
        if (newUser.getEmail() == null || !isEmailValid(newUser.getEmail()))
            return ResponseEntity.status(400).build();
        if (userRepository.findByEmail(newUser.getEmail()) != null || userRepository.findByUsername(newUser.getEmail()) != null)
            return ResponseEntity.status(400).build();

        userRepository.save(newUser);
        return ResponseEntity.status(200).build();
    }

    @GetMapping(path = "/allUsers")
    public @ResponseBody
    List<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping(path = "/login")
    public ResponseEntity<String> userLogin(@RequestBody LoginDTO loginDTO) {
        User user;
        if (isEmailValid(loginDTO.getUsernameOrEmail()))
            user = userRepository.findByEmail(loginDTO.getUsernameOrEmail());
        else
            user = userRepository.findByUsername(loginDTO.getUsernameOrEmail());

        if (user == null || !loginDTO.getPassword().equals(user.getHashed_pass()))
            return ResponseEntity.badRequest().body("Incorrect password or user not found :(");
        else
            return ResponseEntity.ok("Login succesfull");
    }

    @GetMapping(path="user/{id}")
    public @ResponseBody User getUserById(@PathVariable int id) {
        if (userRepository.findById(id) != null)
            return userRepository.findById(id);
        else
            return new User();
    }
}

